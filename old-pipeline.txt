//store
import { create } from "zustand";
import { useTranslationStore } from "@/store/translation-store"; // Sync original transcript to translation store

export interface TranscriptItem {
  text: string;
  duration: number;
  offset: number;
  translatedText?: string;
}

interface TranscriptState {
  videoId: string | null;
  videoTitle: string;
  channelTitle: string;
  publishDate: string;
  views: string;
  likes: string;
  duration: string;
  description: string;
  transcript: TranscriptItem[];
  originalTranscript: TranscriptItem[];
  isLoading: boolean;
  error: string | null;
  selectedLanguage: string;
  detectedLanguage: string;
  translationTarget: string | null;
  isTranslating: boolean;

  // Actions
  setVideoId: (videoId: string) => void;
  fetchTranscriptData: (videoId: string) => Promise<void>;
  setSelectedLanguage: (language: string) => void;
  setTranslationTarget: (language: string | null) => void;
  translateTranscript: (language: string) => Promise<void>;
  clearTranscript: () => void;
}

export const useTranscriptStore = create<TranscriptState>((set, get) => ({
  videoId: null,
  videoTitle: "",
  channelTitle: "",
  publishDate: "",
  views: "0",
  likes: "0",
  duration: "",
  description: "",
  transcript: [],
  originalTranscript: [],
  isLoading: false,
  error: null,
  selectedLanguage: "en",
  detectedLanguage: "en",
  translationTarget: null,
  isTranslating: false,

  setVideoId: (videoId) => set({ videoId }),

  fetchTranscriptData: async (videoId) => {
    set({ isLoading: true, error: null });

    try {
      // No valid cache, fetch from API
      const url = `https://www.youtube.com/watch?v=${videoId}`;

      // Use browser's fetch API with AbortController for timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout (increased from 10s)

      try {
        console.log("Fetching transcript for URL:", url);
        const response = await fetch("/api/transcript", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ url }),
          signal: controller.signal,
        });

        clearTimeout(timeoutId);

        // Check if the request was aborted
        if (controller.signal.aborted) {
          throw new Error("Request timed out. Please try again.");
        }

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || "Failed to fetch transcript");
        }

        const data = await response.json();

        // Get the detected language from the API response
        const detectedLanguage = data.metadata.language || "en";

        // Make sure we have a title
        let videoTitle = data.metadata.title;

        // Additional safeguard for title
        if (!videoTitle || videoTitle.trim() === "") {
          videoTitle = `YouTube Video (${videoId})`;
          console.log(
            "Store: Title was empty, using default with videoId:",
            videoTitle
          );
        }

        console.log("Setting video title in store:", videoTitle);

        set({
          videoId,
          videoTitle,
          channelTitle: data.metadata.channelTitle || "",
          publishDate: data.metadata.publishDate || "",
          views: data.metadata.views || "0",
          likes: data.metadata.likes || "0",
          duration: data.metadata.duration || "",
          description: data.metadata.description || "",
          transcript: data.transcript,
          originalTranscript: data.transcript,
          selectedLanguage: detectedLanguage,
          detectedLanguage: detectedLanguage,
          isLoading: false,
        });
        // Sync to translation store
        useTranslationStore.getState().setOriginalTranscript(
          data.transcript,
          detectedLanguage
        );
      } catch (fetchError) {
        // Handle fetch-specific errors
        clearTimeout(timeoutId);
        console.error("Fetch error:", fetchError);
        throw fetchError;
      }
    } catch (error) {
      console.error("Error fetching transcript:", error);
      set({
        error:
          error instanceof Error ? error.message : "Failed to fetch transcript",
        isLoading: false,
      });
    }
  },

  setSelectedLanguage: (language) => set({ selectedLanguage: language }),

  setTranslationTarget: (language) => {
    set({
      translationTarget: language,
      isTranslating: !!language,
    });

    if (language) {
      get().translateTranscript(language);
    } else {
      // Restore original transcript
      set({ transcript: get().originalTranscript });
    }
  },

  translateTranscript: async (language) => {
    const { transcript: currentTranscript } = get();
    set({ isTranslating: true, error: null });

    try {
      // Combine all text into a single string with markers to split later
      // This reduces the number of API calls significantly
      const combinedText = currentTranscript
        .map((item) => item.text)
        .join("\n\n###SEGMENT###\n\n");

      // Make a single API call for the entire transcript
      const response = await fetch("/api/translate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          text: combinedText,
          target_lang: language,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Translation failed");
      }

      const data = await response.json();

      // Split the translated text back into segments
      const translatedSegments = data.translatedText.split(
        "\n\n###SEGMENT###\n\n"
      );

      // Create a new transcript with translations
      if (translatedSegments.length !== currentTranscript.length) {
        throw new Error("Translation segments don't match original transcript");
      }

      const translatedTranscript = currentTranscript.map((segment, index) => ({
        ...segment,
        translatedText: translatedSegments[index],
        text: translatedSegments[index], // Replace text with translation
      }));

      // Update the transcript with translations
      set({
        transcript: translatedTranscript,
        isTranslating: false,
      });

      // We can't directly import toast here, so we'll use a custom event
      // to notify the UI that translation is complete
      if (typeof window !== "undefined") {
        window.dispatchEvent(
          new CustomEvent("translation-complete", {
            detail: { language },
          })
        );
      }
    } catch (error) {
      console.error("Error translating transcript:", error);
      set({
        error:
          error instanceof Error
            ? error.message
            : "Failed to translate transcript",
        isTranslating: false,
        // Keep the original transcript if translation fails
        transcript: get().originalTranscript,
      });
    }
  },

  clearTranscript: () =>
    set({
      transcript: [],
      originalTranscript: [],
      videoTitle: "",
      channelTitle: "",
      publishDate: "",
      views: "0",
      likes: "0",
      duration: "",
      description: "",
      error: null,
      selectedLanguage: "en",
      detectedLanguage: "en",
      translationTarget: null,
    }),
}));


//trnascript generator

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useTranscriptStore } from "@/store/transcript-store";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { getVideoId } from "@/lib/youtube";
import { toast } from "sonner";

export default function TranscriptGenerator() {
  const [youtubeUrl, setYoutubeUrl] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const { clearTranscript } = useTranscriptStore();
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Trim the URL to remove any whitespace
    const trimmedUrl = youtubeUrl.trim();

    if (!trimmedUrl) {
      toast.error("Please enter a YouTube URL");
      return;
    }

    setIsLoading(true);

    try {
      const videoId = getVideoId(trimmedUrl);
      if (videoId) {
        console.log(
          "Valid YouTube URL detected, navigating to transcript page"
        );
        clearTranscript();
        router.push(`/transcript/${videoId}`);
      } else {
        console.error("Invalid YouTube URL:", trimmedUrl);
        toast.error("Please enter a valid YouTube URL");
        setIsLoading(false);
      }
    } catch (error) {
      console.error("Error processing URL:", error);
      toast.error("An error occurred. Please try again.");
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full bg-gradient-to-b from-[#b63e33] to-[#b63e33] dark:from-[#b63e33] dark:to-[#b63e33] py-6 border-b border-red-400/20 dark:border-red-800/30">
      <div className="max-w-[800px] mx-auto px-4">
        <form
          onSubmit={handleSubmit}
          className="flex flex-col sm:flex-row gap-4"
        >
          <Input
            type="text"
            placeholder="Paste YouTube URL here..."
            className="flex-1 h-12 bg-white backdrop-blur-sm border-gray-400 border-2 py-4 text-black placeholder:text-black placeholder:font-medium"
            value={youtubeUrl}
            onChange={(e) => setYoutubeUrl(e.target.value)}
          />
          <Button
            type="submit"
            className="h-12 px-8 bg-black hover:bg-gray-800 text-white font-bold"
            disabled={isLoading}
          >
            {isLoading ? "Generating..." : "Generate Transcript"}
          </Button>
        </form>
      </div>
    </div>
  );
}

//transcript page:
"use client";

import { useEffect, useState } from "react";
import { useTranscriptStore } from "@/store/transcript-store";

import { EmbeddedVideo } from "@/components/embedded-video";
import TranscriptViewer from "@/components/transcript/transcript-viewer";
import TranscriptHeader from "@/components/transcript/transcript-header";
import ActionButtons from "@/components/transcript/action-buttons";
import TranslationSettings from "@/components/transcript/translation-settings";
import TranscriptGenerator from "@/components/transcript/transcript-generator";
import FloatingTopButton from "@/components/transcript/floating-top-button";
import MobileAddToHomeBanner from "@/components/mobile-add-to-home-banner";
// Removed unused tabs imports
import { use } from "react";

export default function TranscriptPage({
  params,
}: {
  params: Promise<{ videoId: string }>;
}) {
  const resolvedParams = use(params);
  const { videoId } = resolvedParams;

  const { fetchTranscriptData, isLoading, error, transcript, videoTitle } =
    useTranscriptStore();

  useEffect(() => {
    if (videoId) {
      // Check if we already have data for this video to avoid duplicate calls
      const currentVideoId = useTranscriptStore.getState().videoId;
      if (currentVideoId !== videoId) {
        fetchTranscriptData(videoId);
      }
    }
  }, [videoId, fetchTranscriptData]);

  const [showTranslationSettings, setShowTranslationSettings] = useState(false);

  return (
    <main className="flex flex-col min-h-screen bg-background relative">
      {/* Floating TOP button */}
      <FloatingTopButton />
      {/* Transcript Generator */}
      <TranscriptGenerator />
      {/* Mobile Add to Home Banner */}
      <MobileAddToHomeBanner />

      {/* Video Section */}
      <EmbeddedVideo videoId={videoId} />

      <div className="w-full max-w-[800px] mx-auto px-4 py-6 pb-24 md:pb-6">
        {/* Transcript Header */}
        <TranscriptHeader
          videoId={videoId}
          title={videoTitle}
          isLoading={isLoading}
          error={error}
        />

        {/* Action Buttons */}
        <ActionButtons
          onTranslateClick={() =>
            setShowTranslationSettings(!showTranslationSettings)
          }
        />

        {/* Translation Settings (conditionally shown) */}
        {showTranslationSettings && <TranslationSettings />}

        {/* Transcript Content */}
        <TranscriptViewer
          transcript={transcript}
          isLoading={isLoading}
          error={error}
        />

        {/* Action Buttons (Bottom) */}
        {!isLoading && !error && transcript.length > 0 && (
          <div className="mt-8">
            <ActionButtons
              onTranslateClick={() =>
                setShowTranslationSettings(!showTranslationSettings)
              }
              isBottomButton={true}
            />
          </div>
        )}
      </div>
    </main>
  );
}


//hero section
"use client";

import type React from "react";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Languages, Globe, Clipboard } from "lucide-react";
import { toast } from "sonner";
import { getVideoId } from "@/lib/youtube";

export default function HeroSection() {
  const [youtubeUrl, setYoutubeUrl] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Trim the URL to remove any whitespace
    const trimmedUrl = youtubeUrl.trim();

    if (!trimmedUrl) {
      toast.error("Please enter a YouTube URL");
      return;
    }

    setIsLoading(true);

    try {
      const videoId = getVideoId(trimmedUrl);
      if (videoId) {
        console.log(
          "Valid YouTube URL detected, navigating to transcript page"
        );
        router.push(`/transcript/${videoId}`);
      } else {
        console.error("Invalid YouTube URL:", trimmedUrl);
        toast.error("Please enter a valid YouTube URL");
        setIsLoading(false);
      }
    } catch (error) {
      console.error("Error processing URL:", error);
      toast.error("An error occurred. Please try again.");
      setIsLoading(false);
    }
  };

  return (
    <section className="w-full py-4 sm:py-6 md:py-12 lg:py-16 bg-gradient-to-b from-[#b63e33] to-[#b63e33] dark:from-[#b63e33] dark:to-[#b63e33] text-white">
      <div className="w-[95%] sm:w-[90%] mx-auto flex flex-col items-center text-center">
        <h1 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold tracking-tighter mb-4 max-w-4xl">
          Free Youtube Transcript Generator
        </h1>
        <p className="text-base sm:text-lg md:text-xl mb-6 sm:mb-8 max-w-3xl px-2 sm:px-0">
          Use our free YouTube transcript extractor and Convert any YouTube
          video to Text in one click
        </p>

        <form
          onSubmit={handleSubmit}
          className="w-full max-w-3xl flex flex-col sm:flex-row gap-4 mb-8 mx-auto"
        >
          <Input
            type="text"
            placeholder="Paste YouTube URL here..."
            className="flex-1 h-12 bg-white backdrop-blur-sm border-gray-400 border-2 py-4 text-black placeholder:text-black dark:placeholder:text-white placeholder:font-medium text-sm sm:text-base"
            value={youtubeUrl}
            onChange={(e) => setYoutubeUrl(e.target.value)}
          />
          <Button
            type="submit"
            className="h-12 px-4 sm:px-8 bg-black hover:bg-gray-800 text-white font-bold w-full sm:w-auto"
            disabled={isLoading}
          >
            {isLoading ? "Generating..." : "Generate Transcript"}
          </Button>
        </form>

        <div className="flex flex-col sm:flex-row flex-wrap justify-center gap-4 md:gap-8 mb-6 w-full max-w-3xl mx-auto">
          <div className="flex items-center gap-2 mx-auto sm:mx-0">
            <Clipboard className="h-5 w-5 min-w-[20px]" />
            <span className="text-base">One-Click Copy and Download</span>
          </div>
          <div className="flex items-center gap-2 mx-auto sm:mx-0">
            <Languages className="h-5 w-5 min-w-[20px]" />
            <span className="text-base">Supports Translation</span>
          </div>
          <div className="flex items-center gap-2 mx-auto sm:mx-0">
            <Globe className="h-5 w-5 min-w-[20px]" />
            <span className="text-base">Multiple Languages</span>
          </div>
        </div>

        <div className="flex items-center gap-2 mx-auto mb-2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 min-w-[20px] text-white"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
              clipRule="evenodd"
            />
          </svg>
          <span className="text-base">Trusted by 535k+ Users Worldwide</span>
        </div>

        <div className="text-base mb-4 mx-auto">
          No Signup & Free Unlimited Usage
        </div>
      </div>
    </section>
  );
}

//trnascript input form"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";
import { getVideoId } from "@/lib/youtube";
import { useTranscriptStore } from "@/store/transcript-store";

interface TranscriptInputFormProps {
  buttonText?: string;
  className?: string;
}

export default function TranscriptInputForm({
  buttonText = "Generate Transcript",
  className = "",
}: TranscriptInputFormProps) {
  const [youtubeUrl, setYoutubeUrl] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();
  const { clearTranscript } = useTranscriptStore();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Trim the URL to remove any whitespace
    const trimmedUrl = youtubeUrl.trim();

    if (!trimmedUrl) {
      toast.error("Please enter a YouTube URL");
      return;
    }

    setIsLoading(true);

    try {
      const videoId = getVideoId(trimmedUrl);
      if (videoId) {
        console.log(
          "Valid YouTube URL detected, navigating to transcript page"
        );
        clearTranscript();
        router.push(`/transcript/${videoId}`);
      } else {
        console.error("Invalid YouTube URL:", trimmedUrl);
        toast.error("Please enter a valid YouTube URL");
        setIsLoading(false);
      }
    } catch (error) {
      console.error("Error processing URL:", error);
      toast.error("An error occurred. Please try again.");
      setIsLoading(false);
    }
  };

  return (
    <div className={`w-full ${className}`}>
      <form
        onSubmit={handleSubmit}
        className="flex flex-col sm:flex-row gap-4"
      >
        <Input
          type="text"
          placeholder="Paste YouTube URL here..."
          className="flex-1 h-12 bg-white backdrop-blur-sm border-gray-400 border-2 py-4 text-black placeholder:text-black dark:placeholder:text-white placeholder:font-medium"
          value={youtubeUrl}
          onChange={(e) => setYoutubeUrl(e.target.value)}
        />
        <Button
          type="submit"
          className="h-12 px-8 bg-black hover:bg-gray-800 text-white font-bold"
          disabled={isLoading}
        >
          {isLoading ? "Generating..." : buttonText}
        </Button>
      </form>
    </div>
  );
}

//trnascript viewer
"use client";

import React from "react";
import { TranscriptItem } from "@/store/transcript-store";
import { useTranslationStore } from "@/store/translation-store";
import { ArrowUp } from "lucide-react";

interface TranscriptViewerProps {
  transcript: TranscriptItem[];
  isLoading: boolean;
  error: string | null;
}

export default function TranscriptViewer({
  transcript,
  isLoading,
  error,
}: TranscriptViewerProps) {
  const { translatedTranscript, isTranslating } = useTranslationStore();

  if (isLoading || isTranslating) {
    return (
      <div className="p-6 bg-muted rounded-lg animate-pulse">
        {isTranslating && (
          <div className="mb-4 p-2 bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 rounded">
            <p className="text-sm font-medium flex items-center">
              <span className="inline-block animate-pulse mr-2">⏳</span>
              Translating transcript... This may take a moment.
            </p>
          </div>
        )}
        <div className="h-4 bg-muted-foreground/20 rounded w-3/4 mb-4"></div>
        <div className="h-4 bg-muted-foreground/20 rounded w-1/2 mb-4"></div>
        <div className="h-4 bg-muted-foreground/20 rounded w-5/6 mb-4"></div>
        <div className="h-4 bg-muted-foreground/20 rounded w-2/3 mb-4"></div>
        <div className="h-4 bg-muted-foreground/20 rounded w-4/5"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6 bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 rounded-lg">
        <p className="font-medium">Failed to load transcript</p>
        <p className="text-sm mt-2">{error}</p>
      </div>
    );
  }

  if (transcript.length === 0) {
    return (
      <div className="p-6 bg-muted rounded-lg">
        <p className="text-center text-muted-foreground">
          No transcript available for this video.
        </p>
      </div>
    );
  }

  return (
    <div className="relative mt-6">
      <div className="p-6 bg-muted rounded-lg">
        {/* Machine translation notice removed */}
        <div className="transcript-container">
          <p className="leading-relaxed text-base">
            {(translatedTranscript.length > 0
              ? translatedTranscript
              : transcript
            ).map((item, index) => (
              <span key={index}>{item.text} </span>
            ))}
          </p>

          {/* Back To Top Button */}
          <div className="mt-6 mb-2 flex justify-center">
            <button
              onClick={() => window.scrollTo({ top: 0, behavior: "smooth" })}
              className="flex items-center justify-center gap-2 bg-black hover:bg-gray-800 dark:bg-[#FFD700] dark:hover:bg-[#FFCC00] dark:text-black text-white font-medium rounded-lg py-3 px-6 w-full max-w-md transition-all duration-300 ease-in-out shadow-md"
              aria-label="Back to top"
            >
              <ArrowUp className="h-5 w-5" />
              <span>Back To Top</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}