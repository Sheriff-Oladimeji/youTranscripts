// Utility functions for exporting transcripts (TXT and PDF)

/**
 * Generates a unique ID for filenames
 * @param prefix Optional prefix for the ID
 * @returns A string with the format prefix-YYYYMMDD-HHMMSS-XXX where XXX is a random 3-digit number
 */
export function generateUniqueId(prefix: string = "transcript"): string {
  const now = new Date();

  const date =
    now.getFullYear().toString() +
    (now.getMonth() + 1).toString().padStart(2, "0") +
    now.getDate().toString().padStart(2, "0");

  const time =
    now.getHours().toString().padStart(2, "0") +
    now.getMinutes().toString().padStart(2, "0") +
    now.getSeconds().toString().padStart(2, "0");

  const random = Math.floor(Math.random() * 1000)
    .toString()
    .padStart(3, "0");

  return `${prefix}-${date}-${time}-${random}`;
}

/**
 * Formats a transcript for download as a text file
 * @param transcript Array of transcript items
 * @param title Optional title to include at the top of the file
 * @returns Formatted string ready for download
 */
export function formatTranscriptForDownload(
  transcript: Array<{ text: string; duration?: number; offset?: number }>,
  title?: string
): string {
  const timestamp = new Date().toLocaleString();
  let content = "";

  content += "Transcript Generated for Free by youtranscripts.com\n";
  content += "==========================================================\n\n";

  if (title) {
    content += `Title: ${title}\n`;
    content += "=".repeat(title.length + 7) + "\n\n";
  }

  content += `Generated on: ${timestamp}\n\n`;

  transcript.forEach((item, index) => {
    content += item.text + "\n";
    if ((index + 1) % 5 === 0) {
      content += "\n";
    }
  });

  content += "\n\n==========================================================\n";
  content += "Generated by youtranscripts.com - Free YouTube Transcript Tool\n";

  return content;
}

/**
 * Downloads content as a file
 * @param content The text content to download
 * @param filename The name of the file without extension
 * @param format The format of the file (txt or pdf)
 */
export function downloadTextFile(
  content: string,
  filename: string,
  format: "txt" | "pdf" = "txt"
): void {
  if (format === "pdf") {
    downloadAsPdf(content, filename);
    return;
  }

  const blob = new Blob([content], { type: "text/plain" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename.endsWith(".txt") ? filename : `${filename}.txt`;
  document.body.appendChild(a);
  a.click();
  setTimeout(() => {
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, 100);
}

/**
 * Generates and downloads a PDF file from text content
 * @param content The text content to include in the PDF
 * @param filename The name of the file without extension
 */
export function downloadAsPdf(content: string, filename: string): void {
  const iframe = document.createElement("iframe");
  iframe.style.display = "none";
  document.body.appendChild(iframe);

  const iframeDoc = iframe.contentDocument || iframe.contentWindow?.document;
  if (!iframeDoc) {
    console.error("Could not access iframe document");
    return;
  }

  const formattedContent = content.replace(/\n/g, "<br>");
  iframeDoc.write(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>${filename}</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.5; margin: 30px; }
        .content { white-space: pre-wrap; }
        .header, .footer { text-align: center; margin: 20px 0; font-weight: bold; color: #333; }
        .divider { border-top: 1px solid #ccc; margin: 20px 0; }
      </style>
    </head>
    <body>
      <div class="header">Transcript Generated for Free by youtranscripts.com</div>
      <div class="divider"></div>
      <div class="content">${formattedContent}</div>
      <div class="divider"></div>
      <div class="footer">Generated by youtranscripts.com - Free YouTube Transcript Tool</div>
    </body>
    </html>
  `);
  iframeDoc.close();

  setTimeout(() => {
    iframe.contentWindow?.focus();
    iframe.contentWindow?.print();
    setTimeout(() => {
      document.body.removeChild(iframe);
    }, 100);
  }, 500);
}
