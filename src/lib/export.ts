// Utility functions for exporting transcripts (TXT and PDF)

/**
 * Generates a unique ID for filenames
 * @param prefix Optional prefix for the ID
 * @returns A string with the format prefix-YYYYMMDD-HHMMSS-XXX where XXX is a random 3-digit number
 */
export function generateUniqueId(prefix: string = "transcript"): string {
  const now = new Date();

  const date =
    now.getFullYear().toString() +
    (now.getMonth() + 1).toString().padStart(2, "0") +
    now.getDate().toString().padStart(2, "0");

  const time =
    now.getHours().toString().padStart(2, "0") +
    now.getMinutes().toString().padStart(2, "0") +
    now.getSeconds().toString().padStart(2, "0");

  const random = Math.floor(Math.random() * 1000)
    .toString()
    .padStart(3, "0");

  return `${prefix}-${date}-${time}-${random}`;
}

/**
 * Formats a transcript for download as a text file
 * @param transcript Array of transcript items
 * @param title Optional title to include at the top of the file
 * @returns Formatted string ready for download
 */
export function formatTranscriptForDownload(
  transcript: Array<{ text: string; duration?: number; offset?: number }>,
  title?: string
): string {
  const timestamp = new Date().toLocaleString();
  let content = "";

  content += "Transcript Generated for Free by youtranscripts.com\n";
  content += "==========================================================\n\n";

  if (title) {
    content += `Title: ${title}\n`;
    content += "=".repeat(title.length + 7) + "\n\n";
  }

  content += `Generated on: ${timestamp}\n\n`;

  transcript.forEach((item, index) => {
    content += item.text + "\n";
    if ((index + 1) % 5 === 0) {
      content += "\n";
    }
  });

  content += "\n\n==========================================================\n";
  content += "Generated by youtranscripts.com - Free YouTube Transcript Tool\n";

  return content;
}

import { jsPDF } from "jspdf";

/**
 * Generates and downloads a PDF file containing only the transcript text
 */
export function downloadAsPdf(content: string, filename: string): void {
  const doc = new jsPDF({ unit: "pt", format: "letter" });
  const margin = 40;
  const pageWidth = doc.internal.pageSize.getWidth();
  const maxLineWidth = pageWidth - margin * 2;
  // Split text into lines fitting page width
  const lines = doc.splitTextToSize(content, maxLineWidth);
  // Paginate text manually to support multi-page transcripts
  const pageHeight = doc.internal.pageSize.getHeight();
  const fontSize = doc.getFontSize();
  const lineHeight = fontSize * 1.2;
  let y = margin;
  lines.forEach((line: string) => {
    if (y + lineHeight > pageHeight - margin) {
      doc.addPage();
      y = margin;
    }
    doc.text(line, margin, y);
    y += lineHeight;
  });
  const outputName = filename.endsWith(".pdf") ? filename : `${filename}.pdf`;
  doc.save(outputName);
}

/**
 * Downloads content as a file
 * @param content The text content to download
 * @param filename The name of the file without extension
 * @param format The format of the file (txt or pdf)
 */
/**
 * Formats transcript content as SRT subtitle format
 * @param content The transcript content
 * @returns Formatted SRT string
 */
function formatAsSRT(content: string): string {
  // Split the content into lines
  const lines = content.split("\n").filter((line) => line.trim() !== "");

  // Remove header and footer lines
  const contentLines = lines.filter(
    (line) =>
      !line.includes("Transcript Generated for Free by youtranscripts.com") &&
      !line.includes(
        "=========================================================="
      ) &&
      !line.startsWith("Title:") &&
      !line.startsWith("Generated on:")
  );

  let srtContent = "";
  let index = 1;

  // Process each line as a subtitle entry
  contentLines.forEach((line, i) => {
    if (line.trim() === "") return;

    // Calculate fake timestamps (each subtitle shows for 3 seconds)
    const startTime = i * 3;
    const endTime = startTime + 3;

    // Format: index number
    srtContent += `${index}\n`;

    // Format: start time --> end time
    srtContent += `${formatSRTTime(startTime)} --> ${formatSRTTime(endTime)}\n`;

    // Format: subtitle text
    srtContent += `${line}\n\n`;

    index++;
  });

  return srtContent;
}

/**
 * Formats a time in seconds to SRT timestamp format (00:00:00,000)
 * @param seconds Time in seconds
 * @returns Formatted SRT timestamp
 */
function formatSRTTime(seconds: number): string {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);
  const milliseconds = Math.floor((seconds % 1) * 1000);

  return `${String(hours).padStart(2, "0")}:${String(minutes).padStart(
    2,
    "0"
  )}:${String(secs).padStart(2, "0")},${String(milliseconds).padStart(3, "0")}`;
}

/**
 * Formats transcript content as CSV
 * @param content The transcript content
 * @returns Formatted CSV string
 */
function formatAsCSV(content: string): string {
  // Split the content into lines
  const lines = content.split("\n").filter((line) => line.trim() !== "");

  // Remove header and footer lines
  const contentLines = lines.filter(
    (line) =>
      !line.includes("Transcript Generated for Free by youtranscripts.com") &&
      !line.includes(
        "=========================================================="
      ) &&
      !line.startsWith("Title:") &&
      !line.startsWith("Generated on:")
  );

  // Create CSV header
  let csvContent = "Index,Timestamp,Text\n";

  // Process each line
  contentLines.forEach((line, i) => {
    if (line.trim() === "") return;

    // Calculate fake timestamp (each line is 3 seconds apart)
    const timestamp = formatTimestamp(i * 3);

    // Escape any commas in the text
    const escapedText = `"${line.replace(/"/g, '""')}"`;

    // Add CSV row
    csvContent += `${i + 1},${timestamp},${escapedText}\n`;
  });

  return csvContent;
}

/**
 * Formats a time in seconds to a readable timestamp (MM:SS)
 * @param seconds Time in seconds
 * @returns Formatted timestamp
 */
function formatTimestamp(seconds: number): string {
  const minutes = Math.floor(seconds / 60);
  const secs = Math.floor(seconds % 60);

  return `${String(minutes).padStart(2, "0")}:${String(secs).padStart(2, "0")}`;
}

export function downloadTextFile(
  content: string,
  filename: string,
  format: "txt" | "pdf" | "docx" | "srt" | "csv" = "txt"
): void {
  if (format === "pdf") {
    downloadAsPdf(content, filename);
    return;
  }

  let mimeType = "text/plain";
  let extension = ".txt";

  switch (format) {
    case "docx":
      mimeType =
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
      extension = ".docx";
      break;
    case "srt":
      mimeType = "application/x-subrip";
      extension = ".srt";
      content = formatAsSRT(content);
      break;
    case "csv":
      mimeType = "text/csv";
      extension = ".csv";
      content = formatAsCSV(content);
      break;
    default:
      mimeType = "text/plain";
      extension = ".txt";
  }

  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename.endsWith(extension)
    ? filename
    : `${filename}${extension}`;
  document.body.appendChild(a);
  a.click();
  setTimeout(() => {
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, 100);
}
